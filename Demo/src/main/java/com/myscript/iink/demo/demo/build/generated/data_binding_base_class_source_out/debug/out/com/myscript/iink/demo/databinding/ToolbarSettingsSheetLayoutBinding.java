// Generated by view binder compiler. Do not edit!
package com.myscript.iink.demo.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatSpinner;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.myscript.iink.demo.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ToolbarSettingsSheetLayoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final AppCompatSpinner penBrushDropdown;

  @NonNull
  public final RecyclerView toolbarColors;

  @NonNull
  public final LinearLayout toolbarPenBrushSection;

  @NonNull
  public final LinearLayout toolbarSettingsBottomSheet;

  @NonNull
  public final RecyclerView toolbarThicknesses;

  @NonNull
  public final RecyclerView toolbarTools;

  private ToolbarSettingsSheetLayoutBinding(@NonNull LinearLayout rootView,
      @NonNull AppCompatSpinner penBrushDropdown, @NonNull RecyclerView toolbarColors,
      @NonNull LinearLayout toolbarPenBrushSection,
      @NonNull LinearLayout toolbarSettingsBottomSheet, @NonNull RecyclerView toolbarThicknesses,
      @NonNull RecyclerView toolbarTools) {
    this.rootView = rootView;
    this.penBrushDropdown = penBrushDropdown;
    this.toolbarColors = toolbarColors;
    this.toolbarPenBrushSection = toolbarPenBrushSection;
    this.toolbarSettingsBottomSheet = toolbarSettingsBottomSheet;
    this.toolbarThicknesses = toolbarThicknesses;
    this.toolbarTools = toolbarTools;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ToolbarSettingsSheetLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ToolbarSettingsSheetLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.toolbar_settings_sheet_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ToolbarSettingsSheetLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.pen_brush_dropdown;
      AppCompatSpinner penBrushDropdown = ViewBindings.findChildViewById(rootView, id);
      if (penBrushDropdown == null) {
        break missingId;
      }

      id = R.id.toolbar_colors;
      RecyclerView toolbarColors = ViewBindings.findChildViewById(rootView, id);
      if (toolbarColors == null) {
        break missingId;
      }

      id = R.id.toolbar_pen_brush_section;
      LinearLayout toolbarPenBrushSection = ViewBindings.findChildViewById(rootView, id);
      if (toolbarPenBrushSection == null) {
        break missingId;
      }

      LinearLayout toolbarSettingsBottomSheet = (LinearLayout) rootView;

      id = R.id.toolbar_thicknesses;
      RecyclerView toolbarThicknesses = ViewBindings.findChildViewById(rootView, id);
      if (toolbarThicknesses == null) {
        break missingId;
      }

      id = R.id.toolbar_tools;
      RecyclerView toolbarTools = ViewBindings.findChildViewById(rootView, id);
      if (toolbarTools == null) {
        break missingId;
      }

      return new ToolbarSettingsSheetLayoutBinding((LinearLayout) rootView, penBrushDropdown,
          toolbarColors, toolbarPenBrushSection, toolbarSettingsBottomSheet, toolbarThicknesses,
          toolbarTools);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
